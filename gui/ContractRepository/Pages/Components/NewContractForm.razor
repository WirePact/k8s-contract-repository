@using Wirepact.Pki
@using Grpc.Core
@using Grpc.Net.ClientFactory
<div>
    <div class="mb-8 text-center">
        <button @onclick="AddPki" type="button" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Add PKI manually</button>
        <button @onclick="ShowModal" type="button" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Add PKI via API</button>
    </div>

    @foreach (var (pki, index) in Pkis.Select((pki, index) => (pki, index)))
    {
        <div>
            <div>
                <label for="Pkis[@index].Name" class="block text-sm font-medium text-gray-700">Name</label>
                <div class="mt-1">
                    <input type="text" name="Pkis[@index].Name" @bind="pki.Name" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md p-2" placeholder="The name of the PKI.">
                </div>
            </div>
            <div>
                <label for="Pkis[@index].PublicCertificate" class="block text-sm font-medium text-gray-700">Certificate Public Key</label>
                <div class="mt-1">
                    <textarea name="Pkis[@index].PublicCertificate" rows="5" @bind="pki.PublicCertificate" class="font-mono shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md p-2" placeholder="The public key of the certificate."></textarea>
                </div>
            </div>
            <button type="button" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500" @onclick="() => RemovePki(pki)">
                delete
            </button>
        </div>
    }
    <button type="submit" disabled="@SubmitDisabled" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        Create Contract
    </button>
</div>

@if (ModalShown)
{
    <div class="relative z-10" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
        <div class="fixed z-10 inset-0 overflow-y-auto">
            <div class="flex items-end sm:items-center justify-center min-h-full p-4 text-center sm:p-0">
                <div class="relative bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-sm sm:w-full sm:p-6">
                    <div class="text-right">
                        <button type="button" @onclick="HideModal">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                            </svg>
                        </button>
                    </div>
                    <div class="mt-3 text-center sm:mt-5">
                        <label for="newPkiUri" class="block text-sm font-medium text-gray-700">URI of the PKI</label>
                        <div class="mt-1">
                            <input type="text" id="newPkiUri" @bind="NewPkiUri" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md p-2" placeholder="e.g. https://my-pki.com">
                        </div>
                    </div>
                    <div class="mt-3 text-center sm:mt-5">
                        <label for="newPkiApiKey" class="block text-sm font-medium text-gray-700">API Key (optional)</label>
                        <div class="mt-1">
                            <input type="text" id="newPkiApiKey" @bind="NewPkiApiKey" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md p-2" placeholder="super-secure">
                        </div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(NewPkiError))
                    {
                        <div class="rounded-md bg-red-50 p-4 overflow-hidden">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                                    </svg>
                                </div>
                                <h3 class="ml-2 text-sm font-medium text-red-800">There was an error during the connection</h3>
                            </div>
                            <div class="ml-3">
                                <div class="mt-2 text-sm text-red-700 max-h-48 overflow-scroll">
                                    @NewPkiError
                                </div>
                            </div>
                        </div>
                    }
                    <div class="mt-5 sm:mt-6">
                        <button type="button" @onclick="FetchCertificate" class="inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm">Fetch Certificate</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private string? NewPkiUri { get; set; }

    private string? NewPkiApiKey { get; set; }

    private string? NewPkiError { get; set; }

    private bool ModalShown { get; set; }

    [Parameter]
    public List<Pki> Pkis { get; set; } = new();

    private bool SubmitDisabled => Pkis.Count < 2;

    private void AddPki() => Pkis.Add(new Pki());

    private void RemovePki(Pki pki) => Pkis.Remove(pki);

    private async Task FetchCertificate()
    {
        if (string.IsNullOrWhiteSpace(NewPkiUri))
        {
            return;
        }

        var secure = NewPkiUri.Contains("https");
        var uri = NewPkiUri.Replace("https://", string.Empty).Replace("http://", string.Empty);
        var channel = new Channel(uri, secure ? ChannelCredentials.SecureSsl : ChannelCredentials.Insecure);
        var client = new PkiService.PkiServiceClient(channel);
        var meta = new Metadata();
        if (!string.IsNullOrWhiteSpace(NewPkiApiKey))
        {
            meta.Add("Authorization", NewPkiApiKey);
        }

        try
        {
            var ca = await client.GetCAAsync(new(), meta);
            Pkis.Add(new Pki {PublicCertificate = ca.Certificate.ToStringUtf8()});
            HideModal();
        }
        catch (Exception e)
        {
            NewPkiError = e.ToString();
        }
    }

    private void ShowModal()
    {
        ModalShown = true;
    }

    private void HideModal()
    {
        ModalShown = false;
        NewPkiError = NewPkiUri = NewPkiApiKey = null;
    }

    enum ModalState
    {
        Hidden,
        Entering,
        Shown,
        Leaving,
    }

}
